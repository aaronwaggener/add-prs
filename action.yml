name: Add User Pull Requests to Project Board
author: Aaron Waggener
description: Add open pull requests that match an organization and list of usernames to a project board.
inputs:
  usernames:
    description: 'A space separated list of usernames. Example: octocat mona-lisa'
    required: true
  project-id:
    description: 'The numerical ID of the project, typically found in the URL after "projects/" [organization-name]/projects/[project-id]'
    required: true
  organization:
    description: 'The URL friendly name of the organization where the project is located. Defaults to the current organization where the action is being run.'
    required: false
    default: ${{ github.repository_owner }}
runs:
  using: composite
  steps:
    - id: get-project-node-id 
      run: | 
        if ! echo "${{ inputs.project-id }}" | grep -Eq '^[0-9]+$'; then
          echo "Error: project must be a number"
          exit 1
        fi
        if [ -z "${{ inputs.organization }}" ]; then
          echo "Error: No organization provided"
          exit 1
        fi
        PROJECT_DATA=$(gh api graphql -f query='  
          query($org: String!, $number: Int!) {
            organization(login: $org) {
              projectV2(number: $number) {
                id
                fields(first: 100) {
                  nodes {
                    ... on ProjectV2Field {
                      id
                      name
                    }
                  }
                }
              }
            }
          }'  -f org=${{ inputs.organization }} -F number=${{ inputs.project-id }})

        PROJECT_ID=$(echo $PROJECT_DATA | jq -r '.data.organization.projectV2.id')
        CREATED_AT_FIELD_ID=$(echo $PROJECT_DATA | jq -r '.data.organization.projectV2.fields.nodes[] | select(.name == "Created At") | .id')
        AUTHORED_BY_FIELD_ID=$(echo $PROJECT_DATA | jq -r '.data.organization.projectV2.fields.nodes[] | select(.name == "Authored By") | .id')

        echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
        echo "CREATED_AT_FIELD_ID=$CREATED_AT_FIELD_ID" >> $GITHUB_ENV
        echo "AUTHORED_BY_FIELD_ID=$AUTHORED_BY_FIELD_ID" >> $GITHUB_ENV
      shell: bash
    - id: get-pr-ids
      run: | 
        USERNAMES_FORMATTED=""
        for username in ${{ inputs.usernames }}; do
          USERNAMES_FORMATTED="${USERNAMES_FORMATTED}author:${username} OR "
        done
        USERNAMES_FORMATTED=${USERNAMES_FORMATTED% OR }
        if [ -z "$USERNAMES_FORMATTED" ]; then
          echo "Error: No usernames provided"
          exit 1
        fi
        USERNAMES_FORMATTED="(${USERNAMES_FORMATTED})"
        SEARCH_QUERY="org:${{ inputs.organization }} is:pr is:open $USERNAMES_FORMATTED"
        echo "Search Query: $SEARCH_QUERY"
        PR_DATA=$(gh api graphql --paginate -F query="
        query(\$cursor: String){
          search(first: 100, type: ISSUE, query: \"org:${{ inputs.organization }} is:pr is:open $USERNAMES_FORMATTED\", after: \$cursor) {
            pageInfo {
              hasNextPage
              endCursor
            }
            nodes {
              ... on PullRequest {
                id
                createdAt
                author {
                  login
                }
              }
            }
          }
        }
        " | jq -c '.data.search.nodes[]')

        echo "$PR_DATA" > pr_data.json
      shell: bash
    - id: add-prs-to-project
      run: |
        PR_DATA_FILE=pr_data.json
        for pr_info in $(cat $PR_DATA_FILE); do
          PR_ID=$(echo $pr_info | jq -r '.id')
          PR_CREATED_AT=$(echo $pr_info | jq -r '.createdAt')
          PR_AUTHORED_BY=$(echo $pr_info | jq -r '"@" + .author.login')
          
          # Add PR to project
          ADD_PR_RESULT=$(gh api graphql -f query='
            mutation($project_id: ID!, $pr_id: ID!) {
              addProjectV2ItemById(input: {projectId: $project_id, contentId: $pr_id}) {
                item {
                  id
                }
              }
            }' -f project_id=$PROJECT_ID -f pr_id=$PR_ID)

          PR_ITEM_ID=$(echo $ADD_PR_RESULT | jq -r '.data.addProjectV2ItemById.item.id')
          
          # Set custom Created At field value
          SET_CREATED_AT_RESULT=$(gh api graphql -f query='
            mutation($item_id: ID!, $field_id: ID!, $value: Date!, $project_id: ID!) {
              updateProjectV2ItemFieldValue(input: {itemId: $item_id, fieldId: $field_id, value: {date: $value}, projectId: $project_id}) {
                clientMutationId
              }
            }' -f item_id=$PR_ITEM_ID -f field_id=$CREATED_AT_FIELD_ID -f value=$PR_CREATED_AT -f project_id=$PROJECT_ID)

          # Set custom Authored By field value
          SET_AUTHORED_BY_RESULT=$(gh api graphql -f query='
            mutation($item_id: ID!, $field_id: ID!, $value: String!, $project_id: ID!) {
              updateProjectV2ItemFieldValue(input: {itemId: $item_id, fieldId: $field_id, value: {text: $value}, projectId: $project_id}) {
                clientMutationId
              }
            }' -f item_id=$PR_ITEM_ID -f field_id=$AUTHORED_BY_FIELD_ID -f value=$PR_AUTHORED_BY -f project_id=$PROJECT_ID)

        done
      shell: bash
branding:
  icon: activity
  color: purple
